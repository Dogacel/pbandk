group 'pbandk'

buildscript {
    ext.kotlin_version = '1.2.41'
    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.kotlin:kotlin-native-gradle-plugin:0.7'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

project(':protoc-gen-kotlin') {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'application'
    sourceCompatibility = '1.8'
    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    mainClassName = 'pbandk.gen.MainKt'
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile 'com.google.protobuf:protobuf-java:3.5.1'
        compile project(':runtime:jvm')
        testCompile 'junit:junit:4.12'
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
    /* TODO: move to Kotlin Native one day
    apply plugin: 'konan'
    konanArtifacts {
        program('protoc-gen-kotlin') {
            enableOptimizations true
            entryPoint 'pbandk.gen.main'
        }
    }
    */
}

project(':protoc-gen-kotlin:conformance') {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'application'
    sourceCompatibility = '1.8'
    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    mainClassName = 'pbandk.gen.conformance.MainKt'
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile 'com.google.protobuf:protobuf-java:3.5.1'
        compile project(':protoc-gen-kotlin')
        testCompile 'junit:junit:4.12'
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
}

project(':runtime:common') {
    apply plugin: 'kotlin-platform-common'
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    }
}

project(':runtime:js') {
    apply plugin: 'kotlin-platform-js'
    dependencies {
        expectedBy project(':runtime:common')
        compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    }
}

project(':runtime:jvm') {
    apply plugin: 'kotlin-platform-jvm'
    sourceCompatibility = '1.8'
    compileKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = '1.8'
    }
    dependencies {
        expectedBy project(':runtime:common')
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile 'com.google.protobuf:protobuf-java:3.5.1'
        testCompile 'junit:junit:4.12'
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
}

project(':runtime:native') {
    apply plugin: 'konan'
    konanArtifacts {
        library('pb-and-k') {
            enableMultiplatform true
        }
    }
    dependencies {
        expectedBy project(':runtime:common')
    }
}


import java.nio.file.Paths
task generateWellKnownTypes {
    dependsOn ':protoc-gen-kotlin:installDist'
    doFirst {
        // Build up the CLI info
        def protocPath = System.getProperty('protoc.path')
        if (protocPath == null) throw new InvalidUserDataException("System property protoc.path must be set")
        def args = []
        args << Paths.get(protocPath, 'bin/protoc')
        args << '--kotlin_out=kotlin_package=pbandk.wkt,log=debug:./runtime/common/src/main/kotlin'
        args << '--plugin=protoc-gen-kotlin=' + Paths.get('./protoc-gen-kotlin/build/install/protoc-gen-kotlin/bin/protoc-gen-kotlin')
        if (System.properties['os.name'].toLowerCase().contains('windows')) args[-1] += '.bat'
        def includePath = Paths.get(protocPath, 'include')
        args << '-I' << includePath
        args += includePath.resolve('google/protobuf').toFile().listFiles().findAll {
            it.isFile() && it.toString().endsWith('.proto')
        }
        // Run it
        exec { commandLine(*args) }
    }
}